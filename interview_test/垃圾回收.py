# -*- coding: utf8 -*-
"""
引用计数：
引用计数是每个python对象的一个属性，该属性记录着有多少变量引用（指向）了该对象，该属性就称之为引用计数。
将一个对象直接或者间接赋值给一个变量时，对象的计数器会加1 ；当变量被del删除，或者离开变量所在作用域时，
对象的引用计数器会减 1。当引用计数归零时，代表无任何地方引用该对象，解释器将该对象安全的销毁。
我们可以通过sys模块getrefcount()函数获取对象当前的引用计数。
"""
import sys
class A(object):
    def __init__(self):
        self.data = [x for x in range(10000)]
        self.child = None


def ref():
    a1 = A()
    a2 = A()
    # 循环引用：循环引用即两个对象互相引用对方
    # a1、a2离开其作用域，因此他们指向的对象的引用计数减1
    # 但由于互相引用，两个对象的引用计数始终为1
    # 因此解释器不会对其进行垃圾回收，从而可能造成内存泄露。
    a1.child = a2
    a2.child = a1
    print(sys.getrefcount(a1))
# 引用计数存在的一个大的缺陷是，无法及时回收存在循环引用的对象
ref()

# 解决循环引用：对于循环引用带来的问题，python解释器提供了垃圾收集器(gc)模块，gc使用分代回收算法回收垃圾。
