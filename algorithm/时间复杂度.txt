时间复杂度：
Big O notation
    O(1) 常数复杂度
    O(log n) 对数复杂度
    O(n) 线性复杂度
    O(n ^2)	平方
    O(n ^3)	立方
    O(2 ^n)	指数
    O(n!) 阶乘
    一段代码根据 n 的不同情况会运行多少次
写程序时考虑优化程序的时间复杂度。n 越大，优化效果越明显，越需要考虑优化

1、累加计算

def sums(n):
    sum1 = 0
    for i in range(n):
        sum1 += i
    return sum1
时间复杂度和 n 线性相关，所以为 O(n)

2、公式计算
sum = n * (n+1) /2
时间复杂度是常数，该代码块在运行时只会执行一次，所以为 O(1)

3、递归条件下的时间复杂度
例如斐波那契数列
